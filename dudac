#!/usr/bin/env python

# Copyright (C) 2012, Eduardo Silva <edsiper@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import os
import sys
import shutil
import getopt
import commands

PROTOCOL_GIT = 0
PROTOCOL_SSH = 1

def execute(header, command, status=True):
    print "[+] %s" % (header),
    sys.stdout.flush()

    ret = commands.getstatusoutput(command)
    if ret[0] == 0:
        if status is True:
            print "\t[OK]"
    else:
        if status is True:
            print "\t[FAILED]\n"
        print ret[1]
        exit(1)

    return ret

class Monkey:
    def __init__(self, source_path):
        self.mk_path = source_path

    def configure(self):
        configure = "%s/./configure --debug --disable-plugins=auth,cheetah,mandril,logger,palm,dirlisting --enable-plugins=liana,duda" % (self.mk_path)
        execute("Configuring Monkey\t\t", configure)

    def make_build(self):
        cmd = "make -C %s" % (self.mk_path)
        execute("Building Monkey\t\t", cmd)

    def make_clean(self):
        cmd = "make -C %s clean" % (self.mk_path)
        execute("Cleaning Monkey\t\t", cmd)

    def system(self, cmd):
        return commands.getstatusoutput(cmd)

class MonkeyGIT:
    def __init__(self, protocol):
        self.clone_git = "git://git.monkey-project.com/monkey"
        self.clone_ssh = "ssh://git.monkey-project.com/srv/git/monkey"
        self.set_protocol(protocol)

    def set_protocol(self, protocol):
        if protocol == PROTOCOL_GIT:
            self.protocol = self.clone_git
        elif protocol == PROTOCOL_SSH:
            self.protocol = self.clone_ssh

    def clone(self, to):
        cmd = "git clone " + self.protocol + " " + to
        execute("Cloning Monkey HTTP Daemon\t", cmd)

    def update(self, to):
        cpath = os.getcwd()
        os.chdir(to)
        cmd = "git pull "
        execute("Updating Monkey HTTP Daemon", cmd)
        os.chdir(cpath)

    def remove(self, path):
        cmd = "rm -rf- %s" % path
        print "[+] Deleting Monkey code...",
        try:
                shutil.rmtree(path)
                print "\t[OK]"
        except:
                print "\t[FAILED]"

    def run(self, cmd):
        return commands.getstatusoutput(cmd)

    def print_line(self, l):
        print l,
        sys.stdout.flush()

class Duda:
    def __init__(self):
        self.print_version()
        self.git = MonkeyGIT(PROTOCOL_GIT)
        self.web_service = None
        self.service = None
        self.port = 2001
        self.get_arguments()

    def _monkey_home(self):
        # Check our user temporal directory
        home = os.getenv('USERPROFILE') or os.getenv('HOME')
        dudac_home = "%s/.dudac" % (home)

        return "%s/monkey" % (dudac_home)

    def update_framework(self, protocol):
        self.git.set_protocol(protocol)

        monkey_home = self._monkey_home()

        if os.path.exists(monkey_home):
            self.git.update(monkey_home)
        else:
            self.git.clone(monkey_home)


        # Cleanup and rebuild Monkey
        cpath = os.getcwd()
        os.chdir(monkey_home)
        monkey = Monkey(monkey_home)
        if os.path.exists("./Makefile"):
            monkey.make_clean()
        monkey.configure()
        monkey.make_build()
        os.chdir(cpath)

        exit(0)

    def run_webservice(self):
        ws = self.service

        makefile = "%s/Makefile" % (ws)
        makefile_in = "%s/Makefile.in" % (ws)
        if os.path.isdir(ws) == False or os.path.exists(makefile_in) == False:
            print "Error: Invalid web service directory"
            exit(1)

        # Monkey headers
        mk_inc = self._monkey_home() + "/src/include"
        mk_duda = self._monkey_home() + "/plugins/duda/src"
	mk_packages = self._monkey_home() + "/plugins/duda/"

        # Read the Makefile.in file
        f = open(makefile_in, "r")
        lines = f.readlines()
        f.close()

        raw = ""
        for line in lines:
            if line.startswith("INCDIR"):
                raw += "INCDIR = " + mk_inc + " -I" + mk_duda + " -I" + mk_packages + "\n"
            else:
                raw += line

        f = open(makefile, "w")
        f.write(raw)
        f.close()

        # Cleanup web service and rebuild
        execute("Clean Web Service\t", "make -C " + ws + " clean")
        execute("Build Web Service\t", "make -C " + ws)

        # Get services
        services = []
        list = os.listdir(ws)
        for entry in list:
            p = ws + "/" + entry
            if os.path.isfile(p) and entry.endswith(".duda"):
                services.append({'name': entry[:-5], 'filename': entry})

        # Setting up virtual host
        vhost = self._monkey_home() + "/conf/sites/default"
        f = open(vhost, "r")
        lines = f.readlines()
        f.close()

        # Setting up web services
        print "[+] Configuring HTTP Server\t",
        raw = ""
        for line in lines:
            if line.startswith('[WEB_'):
                break
            else:
                raw += line

        for s in services:
            raw += "[WEB_SERVICE]\n"
            raw += "    Name " + s['name'] + "\n"
            raw += "    Enabled on\n\n"

        f = open(vhost, "w")
        f.write(raw)
        f.close()

        # Setting up Duda plugin configuration
        duda = self._monkey_home() + "/conf/plugins/duda/duda.conf"
        f = open(duda, "r")
        lines = f.readlines()
        f.close()

        raw = ""
        for line in lines:
            if line.startswith("    ServicesRoot"):
                raw += "    ServicesRoot " + ws + "\n\n"
            else:
                raw += line

        f = open(duda, "w")
        f.write(raw)
        f.close()

        # Setting up Monkey
        monkey = self._monkey_home() + "/conf/monkey.conf"
        f = open(monkey, "r")
        lines = f.readlines()
        f.close()

        raw = ""
        for line in lines:
            if line.startswith("    Port"):
                raw += "    Port " + str(self.port) + "\n"
            else:
                raw += line

        f = open(monkey, "w")
        f.write(raw)
        f.close()

        print "[OK]"

        http = self._monkey_home() + "/bin/monkey"

        try:
            execute("Running HTTP Server\t\t[http://localhost:%s]\n" % str(self.port), http, False)
        except:
            print "\nDone!"

    def reset(self):
        mh = self._monkey_home()
        self.git.remove(mh)

    def print_version(self):
        print "Duda Client Manager - v0.1"
        print "http://monkey-project.com\n"

    def print_help(self):
        print "Usage: dudac [-g|-s] [-h] [-v] -w WEB_SERVICE_PATH\n"
        print "Options:"
        print "  -p TCP_PORT\t\tSet TCP port (default 2001)"
        print "  -w WEB_SERVICE\tSpecify web service source path"
        print "  -s\t\t\tClone/Update using SSH"
        print "  -g\t\t\tClone/Update using GIT"
        print "  -r\t\t\tReset environment"
        print "  -h\t\t\tPrint this help"
        print "  -v\t\t\tPrint version"

    def get_arguments(self):
        # Reading command line arguments
        try:
            optlist, args = getopt.getopt(sys.argv[1:], 'sgrhvw:p:')
        except getopt.GetoptError:
            self.print_help()
            sys.exit(2)

        if len(optlist) == 0:
            self.print_help()

        # Check options
        for op, arg in optlist:
            if op == '-s':
                self.update_framework(PROTOCOL_SSH)
                exit(0)
                break
            elif op == '-g':
                self.update_framework(PROTOCOL_GIT)
                exit(0)
                break
            elif op == '-r':
                self.reset()
                exit(0)
                break
            elif op == '-h':
                self.print_help()
                sys.exit(0)
                break
            elif op == '-p':
                if not str(arg).isdigit():
                    self.print_help()
                    exit(1)
                self.port = arg
            elif op == '-v':
                self.print_version()
                sys.exit(0)
                break
            elif op == '-w':
                self.service = arg

        if self.service:
            self.run_webservice()

    def _temp_path(self):
        pass

if __name__ == "__main__":
    d = Duda()
