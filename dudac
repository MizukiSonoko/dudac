#!/usr/bin/env python

# Copyright (C) 2012-2013, Eduardo Silva <edsiper@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import os
import sys
import shutil
import getopt
import ConfigParser

from git import GitProject
from utils import *

PROTOCOL_GIT = 0
PROTOCOL_SSH = 1

class DudaConfig(ConfigParser.ConfigParser):
    def __init__(self):
        ConfigParser.ConfigParser.__init__(self)

    def open(self, path):
        self.read(path)

    def get_handlers(self):
        return self.sections()

    def get_key(self, handler, key):
        try:
            val = self.get(handler, key)
            return val
        except:
            return None

class Monkey:
    recent_configure = False
    recent_build = False
    recent_clean = False

    def __init__(self, source_path):
        self.mk_path = source_path

    def configure(self):
        if self.recent_configure is True:
            return

        cpath = os.getcwd()
        os.chdir(self.mk_path)

        configure = "./configure --debug --disable-plugins='*' --enable-plugins='liana,duda'"
        execute("Monkey: prepare build", configure)

        os.chdir(cpath)
        self.recent_configure = True

    def make_build(self):
        if self.recent_build is True:
            return

        cmd = "make -C %s" % (self.mk_path)
        execute("Monkey: building", cmd)

        self.recent_build = True

    def make_clean(self):
        if self.recent_clean is True:
            return

        if os.path.exists(self.mk_path + '/Makefile') is False:
            return

        cmd = "make -C %s clean" % (self.mk_path)
        execute("Monkey: cleaning", cmd)

        self.recent_clean = True

    def system(self, cmd):
        return commands.getstatusoutput(cmd)

class MonkeyGIT (GitProject):
    def __init__(self):
        git_repo = 'git://git.monkey-project.com/monkey'
        ssh_repo = 'ssh://git.monkey-project.com/srv/git/monkey'
        GitProject.__init__(self, 'Monkey', git_repo, ssh_repo)

    def home(self):
        # Check our user temporal directory
        home = os.getenv('USERPROFILE') or os.getenv('HOME')
        dudac_home = "%s/.dudac" % (home)

        return "%s/monkey" % (dudac_home)

class DudaGIT(GitProject):
    def __init__(self):
        git_repo = 'git://git.monkey-project.com/duda'
        ssh_repo = 'ssh://git.monkey-project.com/srv/git/duda'
        GitProject.__init__(self, 'Duda', git_repo, ssh_repo)

    def home(self):
        # Check our user temporal directory
        home = os.getenv('USERPROFILE') or os.getenv('HOME')
        dudac_home = "%s/.dudac" % (home)

        return "%s/duda" % (dudac_home)

class Duda:
    def __init__(self):
        self.print_version()
        self.web_service = None
        self.service = None
        self.port = 2001
        self.rebuild_monkey = True
        self.mk_git = MonkeyGIT()
        self.duda_git = DudaGIT()
        self.mk_home = self.mk_git.home()
        self.duda_home  = self.duda_git.home()
        self.dudac_wd   = '%s/.dudac' % (os.getenv('USERPROFILE') or os.getenv('HOME'))
        self.stage_home = self.dudac_wd + '/stage/'
        self.monkey  = Monkey(self.stage_home + 'monkey/')
        self.get_arguments()

        exit(0)

    # This routine read the config.dudac configuration file which is
    # optional inside every web service source code. It specifies the
    # Monkey sources requirements and perform the right setup
    def config_requirements(self):
        ws = os.path.abspath(self.service)

        config_file = os.path.abspath("%s/config.dudac" % (ws))
        if not os.path.isdir(ws):
            print "Error: Invalid web service directory"
            exit(1)

        # Check if the service have a configuration file
        if os.path.isfile(config_file) is False:
            return

        # Read the configuration
        config = DudaConfig()
        config.open(config_file)

        mk_version    = None
        mk_git_repo   = None
        mk_ssh_repo   = None
        duda_version  = None
        duda_git_repo = None
        duda_ssh_repo = None

        for h in config.get_handlers():
            if h == 'MONKEY':
                # Get key/values
                mk_version  = config.get_key(h, 'version')
                mk_git_repo = config.get_key(h, 'git_repo')
                mk_ssh_repo = config.get_key(h, 'ssh_repo')
            elif h == 'DUDA':
                duda_version  = config.get_key(h, 'version')
                duda_git_repo = config.get_key(h, 'git_repo')
                duda_ssh_repo = config.get_key(h, 'ssh_repo')

        self.mk_git.setup(mk_version, mk_git_repo, mk_ssh_repo)
        self.duda_git.setup(duda_version, duda_git_repo, duda_ssh_repo)

    def update_framework(self, protocol):
        self.mk_git.set_protocol(protocol)
        self.duda_git.set_protocol(protocol)

        if os.path.exists(self.mk_home):
            self.mk_git.update(self.mk_home)
        else:
            self.mk_git.clone(self.mk_home)

        if os.path.exists(self.duda_home):
            self.duda_git.update(self.duda_home)
        else:
            self.duda_git.clone(self.duda_home)

        # Cleanup and rebuild Monkey
        cpath = os.getcwd()
        os.chdir(self.mk_home)

        self.mk_git.snapshot()

        self.merge_on_stage()
        self.monkey.configure()

        if os.path.exists("./Makefile"):
            self.monkey.make_clean()

        self.monkey.make_build()
        os.chdir(cpath)

    def merge_on_stage(self):
        self.mk_git.archive_to(self.stage_home + '/monkey')
        self.duda_git.archive_to(self.stage_home + '/monkey/plugins/duda')

    def run_webservice(self):
        ws = os.path.abspath(self.service)
        monkey_stage = self.monkey.mk_path

        if self.rebuild_monkey is True:
            # Make sure Monkey sources match the snapshot
            self.mk_git.snapshot()
            self.duda_git.snapshot()
            self.merge_on_stage()

            # Cleanup and rebuild Monkey
            cpath = os.getcwd()
            os.chdir(monkey_stage)

            if os.path.exists("./Makefile"):
                self.monkey.make_clean()

                self.monkey.configure()
                self.monkey.make_build()
            os.chdir(cpath)

        makefile = "%s/Makefile" % (ws)
        makefile_in = "%s/Makefile.in" % (ws)
        if os.path.isdir(ws) is False or os.path.exists(makefile_in) is False:
            print "Error: Invalid web service directory " + ws
            exit(1)

        # Monkey headers
        mk_inc      = monkey_stage + "/src/include"
        mk_duda     = monkey_stage + "/plugins/duda/src"
	mk_packages = monkey_stage + "/plugins/duda/"


        # Read the Makefile.in file
        mk_ins = []
        for root, dirs, files in os.walk(ws):
            for file in files:
                if file == 'Makefile.in':
                    path = "%s/%s" % (root, file)
                    mk_ins.append(root)


        for mk in mk_ins:
            mk_in = "%s/Makefile.in" % (mk)

            f = open(mk_in, "r")
            lines = f.readlines()
            f.close()

            raw = ""
            for line in lines:
                if line.startswith("INCDIR"):
                    raw += "INCDIR = " + mk_inc + " -I" + mk_duda + " -I" + mk_packages + "\n"
                else:
                    raw += line

                    makefile = "%s/Makefile" % (mk)
                    f = open(makefile, "w")
                    f.write(raw)
                    f.close()

        # Cleanup web service and rebuild
        execute("WebService: clean", "make -C " + ws + " clean")
        execute("WebService: build", "make -C " + ws)

        # Get services
        services = []
        list = os.listdir(ws)
        for entry in list:
            p = ws + "/" + entry
            if os.path.isfile(p) and entry.endswith(".duda"):
                services.append({'name': entry[:-5], 'filename': entry})

        # check that services exists
        if len(services) == 0:
            print "Error: i could not find Duda services under", ws
            exit(1)

        # Setting up virtual host
        vhost = monkey_stage + "/conf/sites/default"
        f = open(vhost, "r")
        lines = f.readlines()
        f.close()

        # Setting up web services
        print "[+] %-30s" % "Monkey: configure HTTP Server",
        raw = ""
        for line in lines:
            if line.startswith('[WEB_'):
                break
            else:
                raw += line

        for s in services:
            raw += "[WEB_SERVICE]\n"
            raw += "    Name " + s['name'] + "\n"
            raw += "    Enabled on\n"

            html = os.path.abspath(self.service) + '/html/'
            if os.path.exists(html):
                raw += "    DocumentRoot %s\n" % (html)

            confdir = os.path.abspath(self.service) + '/conf/'
            if os.path.exists(confdir):
                raw += "    ConfDir %s\n" % (confdir)

            datadir = os.path.abspath(self.service) + '/data/'
            if os.path.exists(datadir):
                raw += "    DataDir %s\n" % (datadir)

            raw += "\n"

        f = open(vhost, "w")
        f.write(raw)
        f.close()

        # Make sure Duda plugin is enabled on plugins.load
        plugins = monkey_stage + "/conf/plugins.load"
        f = open(plugins, "r")
        lines = f.readlines()
        f.close()

        raw = ""
        for line in lines:
            if line.startswith("    # Load") and line.strip().endswith("-duda.so"):
                line = "    " + line[6:]

            raw += line

        f = open(plugins, "w")
        f.write(raw)
        f.close()

        # Setting up Duda plugin configuration
        duda = monkey_stage + "/conf/plugins/duda/duda.conf"
        f = open(duda, "r")
        lines = f.readlines()
        f.close()

        raw = ""
        for line in lines:
            if line.startswith("    ServicesRoot"):
                raw += "    ServicesRoot " + ws + "\n"
            else:
                raw += line

        f = open(duda, "w")
        f.write(raw)
        f.close()

        # Setting up Monkey
        monkey = monkey_stage + "/conf/monkey.conf"
        f = open(monkey, "r")
        lines = f.readlines()
        f.close()

        raw = ""
        for line in lines:
            if line.startswith("    Port"):
                raw += "    Port " + str(self.port) + "\n"
            else:
                raw += line

        f = open(monkey, "w")
        f.write(raw)
        f.close()

        print "[OK]"

        http = monkey_stage + "bin/monkey"

        try:
            d = 0
            domain = "[http://localhost:%s/" % str(self.port)
            schema = ""
            for s in services:
                if d > 0:
                    schema += "                                   "
                schema += domain + services[d]['name'] + "]\n"
                d += 1

            execute("Running HTTP Server            %s" % schema, http, False)
        except (RuntimeError, TypeError, NameError):
            print "\nDone!"
            raise

    def reset(self):
        self.mk_git.remove(self.mk_home)
        self.duda_git.remove(self.duda_home)

    def print_version(self):
        print_bold("Duda Client Manager - v0.7")
        print_color("http://duda.io", ANSI_YELLOW, True)
        print_color("http://monkey-project.com\n", ANSI_YELLOW, True)

    def print_help(self):
        print "Usage: dudac [-g|-s] [-h] [-v] -w WEB_SERVICE_PATH\n"
        print "Options:"
        print "  -p TCP_PORT\t\tSet TCP port (default 2001)"
        print "  -w WEB_SERVICE\tSpecify web service source path"
        print "  -s\t\t\tClone/Update Monkey sources using SSH"
        print "  -g\t\t\tClone/Update Monkey sources using GIT"
        print "  -f\t\t\tDo not rebuild Monkey (fast-run)"
        print "  -r\t\t\tReset environment"
        print "  -h\t\t\tPrint this help"
        print "  -v\t\t\tPrint version"

    def get_arguments(self):
        update = None

        # Reading command line arguments
        try:
            optlist, args = getopt.getopt(sys.argv[1:], 'sgfrhvw:p:')
        except getopt.GetoptError:
            self.print_help()
            sys.exit(2)

        if len(optlist) == 0:
            self.print_help()

        # Check options
        for op, arg in optlist:
            if op == '-s':
                update = PROTOCOL_SSH
            elif op == '-g':
                update = PROTOCOL_GIT
            elif op == '-f':
                self.rebuild_monkey = False
            elif op == '-r':
                self.reset()
                exit(0)
            elif op == '-h':
                self.print_help()
                sys.exit(0)
                break
            elif op == '-p':
                if not str(arg).isdigit():
                    self.print_help()
                    exit(1)
                self.port = arg
            elif op == '-v':
                sys.exit(0)
                break
            elif op == '-w':
                self.service = arg
                self.config_requirements()

        if update is not None:
            if self.rebuild_monkey is False:
                print "Error: you cannot mix the flag -f with -g or -s"
                exit(1)

            self.update_framework(update)

        if self.service:
            self.run_webservice()

    def _temp_path(self):
        pass

if __name__ == "__main__":
    d = Duda()
